import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import yfinance as yf
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet

# 1. Data Collection
crypto_symbol = 'BTC-USD'  # Bitcoin (adjust as needed)
start_date = '2020-01-01'
end_date = '2023-01-01'

crypto_data = yf.download(crypto_symbol, start=start_date, end=end_date)

# 2. Data Cleaning and Preprocessing
crypto_data.dropna(inplace=True)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(crypto_data['Close'].values.reshape(-1, 1))

# 3. Exploratory Data Analysis (EDA)
plt.figure(figsize=(12, 6))
plt.plot(crypto_data['Close'])
plt.title(f'{crypto_symbol} Close Price')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid(True)
plt.show()

# Calculate Moving Averages
crypto_data['MA_50'] = crypto_data['Close'].rolling(window=50).mean()
crypto_data['MA_200'] = crypto_data['Close'].rolling(window=200).mean()

plt.figure(figsize=(12, 6))
plt.plot(crypto_data['Close'], label='Close')
plt.plot(crypto_data['MA_50'], label='MA 50')
plt.plot(crypto_data['MA_200'], label='MA 200')
plt.title(f'{crypto_symbol} Close Price with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.grid(True)
plt.show()

# 4. Feature Engineering (Example: Lag Features)
crypto_data['Lag_1'] = crypto_data['Close'].shift(1)
crypto_data.dropna(inplace=True)

# 5. Time Series Analysis (ARIMA)
model_arima = ARIMA(crypto_data['Close'], order=(5, 1, 0))
model_arima_fit = model_arima.fit()
forecast_arima = model_arima_fit.forecast(steps=30)

# 5. Time Series Analysis (Prophet)
df_prophet = crypto_data['Close'].reset_index()
df_prophet.columns = ['ds', 'y']
model_prophet = Prophet()
model_prophet.fit(df_prophet)
future = model_prophet.make_future_dataframe(periods=30)
forecast_prophet = model_prophet.predict(future)

# Plot Forecasts
plt.figure(figsize=(12, 6))
plt.plot(crypto_data['Close'], label='Actual')
plt.plot(pd.to_datetime(forecast_prophet['ds'][-30:]), forecast_prophet['yhat'][-30:], label='Prophet Forecast')
plt.plot(pd.to_datetime(forecast_arima.index), forecast_arima, label='ARIMA Forecast', color='red')
plt.title(f'{crypto_symbol} Price Forecast')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.grid(True)
plt.show()

# 6. Predictive Modeling (Linear Regression)
features = ['Lag_1', 'MA_50', 'MA_200']
target = 'Close'
X_train, X_test, y_train, y_test = train_test_split(crypto_data[features], crypto_data[target], test_size=0.2, random_state=42)
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)
y_pred_lr = model_lr.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred_lr)
print(f'Linear Regression MSE: {mse_lr}')

plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Actual')
plt.plot(y_pred_lr, label='Predicted')
plt.title('Linear Regression Model')
plt.legend()
plt.grid(True)
plt.show()

# 7. Predictive Modeling (LSTM)
seq_length = 60
def create_sequences(data, seq_length):
    xs = []
    ys = []
    for i in range(len(data) - seq_length - 1):
        x = data[i:(i + seq_length), 0]
        y = data[i + seq_length, 0]
        xs.append(x)
        ys.append(y)
    return np.array(xs), np.array(ys)

X, y = create_sequences(scaled_data, seq_length)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

model_lstm = Sequential()
model_lstm.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model_lstm.add(LSTM(units=50))
model_lstm.add(Dense(units=1))
model_lstm.compile(optimizer='adam', loss='mean_squared_error')
model_lstm.fit(X, y, epochs=50, batch_size=32)
